[{"content":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.\n Bom, mas como e onde conseguir os dados para fazer essas análises?\n Navegando bastante entre um post e outro encontrei o post do Ran Aroussi criador dessa lib fantástica escrita em python, era exatamente o que eu precisava para começar o meu projeto de bot que iria fazer todo o trabalho chato no meu lugar.\nComo instalar e usar a lib yfinance Para usar a lib yfinance voce vai precisar ter o python \u0026gt;=3.4 e o pip instalado, veja aqui como instalar no Windows, Linux e MacBook\nCom o python e pip instalados, execute o comando à seguir no terminal:\npip install yfinance --upgrade --no-cache-dir Pronto, agora voce já consegue comecar a usar.\nFazendo o download de dados históricos uma ação por vez Primeiro crie um arquivo com a extensão *.py e adicione as seguintes linhas:\nimport yfinance as yf ticker = \u0026#34;VALE3.SA\u0026#34; period = \u0026#34;1y\u0026#34; interval = \u0026#34;1wk\u0026#34; historical_data = yf.Ticker(ticker).history(period, interval, actions=False).dropna() print(historical_data) \u0026#34;\u0026#34;\u0026#34; Open High Low Close Volume Date 2019-12-29 51.497285 52.313177 51.065340 51.766048 46722600.0 2020-01-05 51.641265 52.188394 50.921359 51.218922 88179900.0 2020-01-12 51.487684 54.799253 51.362899 54.712864 126412900.0 2020-01-19 54.712866 55.058422 51.535679 51.641266 102226200.0 2020-01-26 49.587132 49.999879 47.801764 48.252907 138220500.0 \u0026#34;\u0026#34;\u0026#34; ","permalink":"https://fmaced1.github.io/post/dados-historicos-acoes-b3/","summary":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.","title":"Fazendo o download dos dados históricos de ações usando o yfinance"},{"content":"Como enviar varias fotos agrupadas no telegram? https://core.telegram.org/bots/api#sendmediagroup\nimport telegram class Telebot: def __init__(self): self.bot_token = \u0026#39;token_do_seu_bot\u0026#39; self.chat_id = \u0026#39;id_do_chat\u0026#39; self.bot = telegram.Bot(token=self.bot_token) def send_photos(self, photos): return self.bot.send_media_group(chat_id=self.chat_id, media=photos, disable_notification=True) files=\u0026#34;Arquivos que deseja enviar\u0026#34; photos=[] for file in files: photos.append(open(file, \u0026#39;rb\u0026#39;)) if photos: Telebot().send_photos(photos) ","permalink":"https://fmaced1.github.io/post/enviando-mensagem-telegram-python/","summary":"Como enviar varias fotos agrupadas no telegram? https://core.telegram.org/bots/api#sendmediagroup\nimport telegram class Telebot: def __init__(self): self.bot_token = \u0026#39;token_do_seu_bot\u0026#39; self.chat_id = \u0026#39;id_do_chat\u0026#39; self.bot = telegram.Bot(token=self.bot_token) def send_photos(self, photos): return self.bot.send_media_group(chat_id=self.chat_id, media=photos, disable_notification=True) files=\u0026#34;Arquivos que deseja enviar\u0026#34; photos=[] for file in files: photos.append(open(file, \u0026#39;rb\u0026#39;)) if photos: Telebot().send_photos(photos) ","title":"Como enviar mensagens via telegram com python"},{"content":"Hello from Hugo! If you\u0026rsquo;re reading this in your browser, good job! The file content/post/hello-hugo.md has been converted into a complete HTML document by Hugo. Isn\u0026rsquo;t that pretty nifty?\nA Section Here\u0026rsquo;s a simple titled section where you can place whatever information you want.\nYou can use inline HTML if you want, but really there\u0026rsquo;s not much that Markdown can\u0026rsquo;t do.\nShowing off with Markdown A full cheat sheet can be found here or through Google.\nThere are some easy examples for styling, though. I can\u0026rsquo;t emphasize that enough. Creating links or inline code blocks are very straightforward.\nThere are some *easy* examples for styling, though. I can't **emphasize** that enough. Creating [links](https://google.com/) or `inline code` blocks are very straightforward. Front Matter for Fun This is the meta data for this post. It is located at the top of the content/post/hello-hugo.md markdown file.\n--- title: \u0026quot;Hello Hugo!\u0026quot; description: \u0026quot;Saying 'Hello' from Hugo\u0026quot; date: \u0026quot;2014-09-01\u0026quot; categories: - \u0026quot;example\u0026quot; - \u0026quot;hello\u0026quot; tags: - \u0026quot;example\u0026quot; - \u0026quot;hugo\u0026quot; - \u0026quot;blog\u0026quot; --- This section, called \u0026lsquo;Front Matter\u0026rsquo;, is what tells Hugo about the content in this file: the title of the item, the description, and the date it was posted. In our example, we\u0026rsquo;ve added two custom bits of data too. The categories and tags sections are used in this example for indexing/grouping content. You will learn more about what that means by examining the code in this example and through reading the Hugo documentation.\n","permalink":"https://fmaced1.github.io/post/deploy-com-o-helm-copy/","summary":"Hello from Hugo! If you\u0026rsquo;re reading this in your browser, good job! The file content/post/hello-hugo.md has been converted into a complete HTML document by Hugo. Isn\u0026rsquo;t that pretty nifty?\nA Section Here\u0026rsquo;s a simple titled section where you can place whatever information you want.\nYou can use inline HTML if you want, but really there\u0026rsquo;s not much that Markdown can\u0026rsquo;t do.\nShowing off with Markdown A full cheat sheet can be found here or through Google.","title":"Como fazer deploy da sua aplicação com o Helm"},{"content":"Hello from Hugo! If you\u0026rsquo;re reading this in your browser, good job! The file content/post/hello-hugo.md has been converted into a complete HTML document by Hugo. Isn\u0026rsquo;t that pretty nifty?\nA Section Here\u0026rsquo;s a simple titled section where you can place whatever information you want.\nYou can use inline HTML if you want, but really there\u0026rsquo;s not much that Markdown can\u0026rsquo;t do.\nShowing off with Markdown A full cheat sheet can be found here or through Google.\nThere are some easy examples for styling, though. I can\u0026rsquo;t emphasize that enough. Creating links or inline code blocks are very straightforward.\nThere are some *easy* examples for styling, though. I can't **emphasize** that enough. Creating [links](https://google.com/) or `inline code` blocks are very straightforward. Front Matter for Fun This is the meta data for this post. It is located at the top of the content/post/hello-hugo.md markdown file.\n--- title: \u0026quot;Hello Hugo!\u0026quot; description: \u0026quot;Saying 'Hello' from Hugo\u0026quot; date: \u0026quot;2014-09-01\u0026quot; categories: - \u0026quot;example\u0026quot; - \u0026quot;hello\u0026quot; tags: - \u0026quot;example\u0026quot; - \u0026quot;hugo\u0026quot; - \u0026quot;blog\u0026quot; --- This section, called \u0026lsquo;Front Matter\u0026rsquo;, is what tells Hugo about the content in this file: the title of the item, the description, and the date it was posted. In our example, we\u0026rsquo;ve added two custom bits of data too. The categories and tags sections are used in this example for indexing/grouping content. You will learn more about what that means by examining the code in this example and through reading the Hugo documentation.\n","permalink":"https://fmaced1.github.io/post/como-fazer-um-chatbot/","summary":"Hello from Hugo! If you\u0026rsquo;re reading this in your browser, good job! The file content/post/hello-hugo.md has been converted into a complete HTML document by Hugo. Isn\u0026rsquo;t that pretty nifty?\nA Section Here\u0026rsquo;s a simple titled section where you can place whatever information you want.\nYou can use inline HTML if you want, but really there\u0026rsquo;s not much that Markdown can\u0026rsquo;t do.\nShowing off with Markdown A full cheat sheet can be found here or through Google.","title":"Como fazer o seu próprio chatbot em python com o ChatterBot"},{"content":"Intro\nEsse é um guia para servir de base para os seus estudos e preparação para a prova do CKA.\nDicas para a prova:\nhttps://ravikirans.com/cka-kubernetes-exam-study-guide/ https://codeburst.io/the-ckad-browser-terminal-10fab2e8122e https://jimangel.io/post/cka-exam-for-experienced-kubernetes-operators/\nSplit de tela tmux\nsudo apt-get install tmux {prefix} = ctrl + b {prefix} \u0026quot; ==\u0026gt; split window horizontally {prefix} % ==\u0026gt; split window horizontally {prefix} {Arrow-Key} ==\u0026gt; switch pane {prefix} c ==\u0026gt; create new window {prefix} p ==\u0026gt; move to previous window {prefix} n ==\u0026gt; move to next window {prefix} {Page-up-Key} ==\u0026gt; scroll-up the pane within tmux {prefix} q ==\u0026gt; to quickly flash pane numbers for easy reference to a particular pane {Ctrl} d ==\u0026gt; to exit current pane Hold {prefix} and use {Arrow-Key} to increase/decrease the size of current pane Deletar objetos pode te custar alguns segundos Aqui vai uma dica quase ninguem fala e me ajudou, deletar objetos no kubernetes pode demorar alguns segundos principalmente quando tem algum volume, no caso de deployment ou pod.\nkubectl -f delete objeto.yaml ; ctrl+z + bg O comando ctrl+z + bg coloca o comando anterior em backgroud e te libera a linha de comando para ir editando o yml e isso economiza muito tempo, mesmo.\nSe quiser voltar o comando para foreground, só digitar:\nfg Mastering VIM - ctrl+c ctrl+v, find, go to top down, indentacao em bloco, replace Mark lines: Esc+V (then arrow keys) Copy marked lines: y Cut marked lines: d Past lines: p or P Anote as respostas for i in $(seq 1 24);do echo \u0026#34;$i- \u0026#34; ;done #Pergunta - Peso - OK SKIP 1 - 2 OK 2 - 4 OK 3 - 8 SKIP 4 - 4 5 - 8 Gerenciar o tempo eh a chave Tenha uma maquina windows de reserva, macbook da problema pra compartilhar a camera. Seu documento deve estar dentro do prazo de validade Não faça a prova de frente para uma janela, isso pode atrapalhar a visibilidade kubectl \u0026ndash;dry-run, kubecl explain ","permalink":"https://fmaced1.github.io/post/preparacao-para-o-cka-copy/","summary":"Intro\nEsse é um guia para servir de base para os seus estudos e preparação para a prova do CKA.\nDicas para a prova:\nhttps://ravikirans.com/cka-kubernetes-exam-study-guide/ https://codeburst.io/the-ckad-browser-terminal-10fab2e8122e https://jimangel.io/post/cka-exam-for-experienced-kubernetes-operators/\nSplit de tela tmux\nsudo apt-get install tmux {prefix} = ctrl + b {prefix} \u0026quot; ==\u0026gt; split window horizontally {prefix} % ==\u0026gt; split window horizontally {prefix} {Arrow-Key} ==\u0026gt; switch pane {prefix} c ==\u0026gt; create new window {prefix} p ==\u0026gt; move to previous window {prefix} n ==\u0026gt; move to next window {prefix} {Page-up-Key} ==\u0026gt; scroll-up the pane within tmux {prefix} q ==\u0026gt; to quickly flash pane numbers for easy reference to a particular pane {Ctrl} d ==\u0026gt; to exit current pane Hold {prefix} and use {Arrow-Key} to increase/decrease the size of current pane Deletar objetos pode te custar alguns segundos Aqui vai uma dica quase ninguem fala e me ajudou, deletar objetos no kubernetes pode demorar alguns segundos principalmente quando tem algum volume, no caso de deployment ou pod.","title":"Dicas para passar no exame CKA (Certified Kubernetes Administrator)"},{"content":"","permalink":"https://fmaced1.github.io/archives/","summary":"archives","title":"Archive"},{"content":"","permalink":"https://fmaced1.github.io/search/","summary":"search","title":"Search"}]