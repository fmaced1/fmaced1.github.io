[{"content":"Intro Continuando a série \u0026ldquo;Financial Advisor Bot\u0026rdquo; que inicia nesse post aqui.\nNesse post irei compartilhar a solução de cache que estou usando, bem simples e direto ao ponto. O objetivo aqui é mostrar uma solução de cache que é fácil de implementar e que já irá evitar que o seu serviço fique indisponível, e de quebra irá diminuir bastante o seu tempo de resposta.\nPrimeiro, suba uma instância do redis Se você já não tiver uma instância do redis:\nInstale o docker, escolha de acordo com a sua plataforma aqui.\nNesse link você consegue ver as versões disponíveis, crie também, uma conta no docker hub, precisaremos dela para conseguir fazer o download da imagem do redis.\ndocker login docker pull redis # Caso queira outra versão, especifique depois dos : (dois pontos) #docker pull redis:[version] docker network create redis docker run -d --name=redis --network redis -p 6379:6379 redis:latest Usando o redis from _redis import RedisCache expiration_seconds = (60*60)*1 #60s def get_data_history(ticker=str, period=str, interval=str, expiration_seconds=int): try: return RedisCache.get_redis(ticker) except Exception: data = yf.Ticker(ticker).history(period, interval, actions=False).dropna() RedisCache.set_value(ticker, data, expiration_seconds) return RedisCache.get_redis(ticker) ticker = \u0026#34;STBP3.SA\u0026#34; period = \u0026#34;1y\u0026#34; interval = \u0026#34;1wk\u0026#34; get_data_history(ticker, period, interval, expiration_seconds) # _redis.py import redis, pickle, zlib class RedisCache(Object): def __init__(self): redis_client = redis.StrictRedis(host=\u0026#39;localhost\u0026#39;, port=6379) def set_value(_key, _value, expiration_seconds): \u0026#34;\u0026#34;\u0026#34;[loads json object into redis] Args: _key ([string]): [key must be string] _value ([json]): [Loads json compress with zlib and store into redis] expiration_seconds ([int]): [life time seconds limit for data] \u0026#34;\u0026#34;\u0026#34; redis_client.setex(_key, expiration_seconds, zlib.compress(pickle.dumps(_value))) def get_value(_key): \u0026#34;\u0026#34;\u0026#34;[get content from values] Args: _key ([string]): [get json content from redis] Returns: [dict]: [json content] \u0026#34;\u0026#34;\u0026#34; return pickle.loads(zlib.decompress(redis_client.get(_value))) Como fazer queries no redis? docker exec -it redis redis-cli get VALE3.SA Deletando tudo no redis docker exec -it redis redis-cli FLUSHDB Esse post faz parte da série \u0026ldquo;Financial Advisor Bot\u0026rdquo;, mostrando as soluções que estou usando na construção desse \u0026ldquo;advisor\u0026rdquo;, irei organizar todos os posts dessa série aqui Financial Advisor Bot.\nClick aqui para ir para o próximo post.\n","permalink":"https://fmaced1.github.io/post/como-fazer-cache-de-objetos-json-com-python/","summary":"Intro Continuando a série \u0026ldquo;Financial Advisor Bot\u0026rdquo; que inicia nesse post aqui.\nNesse post irei compartilhar a solução de cache que estou usando, bem simples e direto ao ponto. O objetivo aqui é mostrar uma solução de cache que é fácil de implementar e que já irá evitar que o seu serviço fique indisponível, e de quebra irá diminuir bastante o seu tempo de resposta.\nPrimeiro, suba uma instância do redis Se você já não tiver uma instância do redis:","title":"[Draft] Como fazer cache de objetos json usando python e redis"},{"content":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.\n Bom, mas como e onde conseguir os dados para fazer essas análises?\n Navegando bastante entre um post e outro encontrei o post do Ran Aroussi criador dessa lib fantástica escrita em python, era exatamente o que eu precisava para começar o meu projeto de bot que iria fazer todo o trabalho chato no meu lugar.\nComo instalar e usar a lib yfinance Para usar a lib yfinance voce vai precisar ter o python \u0026gt;=3.4 e o pip instalado, veja aqui como instalar no Windows, Linux e MacBook\nCom o python e pip instalados, execute o comando à seguir no terminal:\npip install yfinance --upgrade --no-cache-dir Pronto, agora voce já consegue comecar a usar.\nFazendo o download de dados históricos uma ação por vez Primeiro crie um arquivo com a extensão *.py e adicione as seguintes linhas:\nimport yfinance as yf ticker = \u0026#34;VALE3.SA\u0026#34; period = \u0026#34;1y\u0026#34; interval = \u0026#34;1wk\u0026#34; historical_data = yf.Ticker(ticker).history(period, interval, actions=False).dropna() print(historical_data) \u0026#34;\u0026#34;\u0026#34; Open High Low Close Volume Date 2019-12-29 51.497285 52.313177 51.065340 51.766048 46722600.0 2020-01-05 51.641265 52.188394 50.921359 51.218922 88179900.0 2020-01-12 51.487684 54.799253 51.362899 54.712864 126412900.0 2020-01-19 54.712866 55.058422 51.535679 51.641266 102226200.0 2020-01-26 49.587132 49.999879 47.801764 48.252907 138220500.0 \u0026#34;\u0026#34;\u0026#34;  Vou fazer uma série de posts, mostrando as soluções que estou usando na construção desse \u0026ldquo;advisor\u0026rdquo;, irei organizar todos os posts dessa série na tag Financial Advisor Bot.\n Click aqui para ir para o próximo post.\n No final iremos gerar um relatório igual à esse:\n ","permalink":"https://fmaced1.github.io/post/kubernetes-debug-remote-java-app/","summary":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.","title":"Debugging remoto de aplicações Java no Kubernetes"},{"content":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.\n Bom, mas como e onde conseguir os dados para fazer essas análises?\n Navegando bastante entre um post e outro encontrei o post do Ran Aroussi criador dessa lib fantástica escrita em python, era exatamente o que eu precisava para começar o meu projeto de bot que iria fazer todo o trabalho chato no meu lugar.\nComo instalar e usar a lib yfinance Para usar a lib yfinance voce vai precisar ter o python \u0026gt;=3.4 e o pip instalado, veja aqui como instalar no Windows, Linux e MacBook\nCom o python e pip instalados, execute o comando à seguir no terminal:\npip install yfinance --upgrade --no-cache-dir Pronto, agora voce já consegue comecar a usar.\nFazendo o download de dados históricos uma ação por vez Primeiro crie um arquivo com a extensão *.py e adicione as seguintes linhas:\nimport yfinance as yf ticker = \u0026#34;VALE3.SA\u0026#34; period = \u0026#34;1y\u0026#34; interval = \u0026#34;1wk\u0026#34; historical_data = yf.Ticker(ticker).history(period, interval, actions=False).dropna() print(historical_data) \u0026#34;\u0026#34;\u0026#34; Open High Low Close Volume Date 2019-12-29 51.497285 52.313177 51.065340 51.766048 46722600.0 2020-01-05 51.641265 52.188394 50.921359 51.218922 88179900.0 2020-01-12 51.487684 54.799253 51.362899 54.712864 126412900.0 2020-01-19 54.712866 55.058422 51.535679 51.641266 102226200.0 2020-01-26 49.587132 49.999879 47.801764 48.252907 138220500.0 \u0026#34;\u0026#34;\u0026#34;  Vou fazer uma série de posts, mostrando as soluções que estou usando na construção desse \u0026ldquo;advisor\u0026rdquo;, irei organizar todos os posts dessa série na tag Financial Advisor Bot.\n Click aqui para ir para o próximo post.\n No final iremos gerar um relatório igual à esse:\n ","permalink":"https://fmaced1.github.io/post/dados-historicos-acoes-b3/","summary":"Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT\u0026rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.\nPesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal \u0026ldquo;interessante\u0026rdquo; com base em alguns parâmetros.","title":"Fazendo o download dos dados históricos de ações usando o yfinance"},{"content":"Como enviar varias fotos agrupadas no telegram? https://core.telegram.org/bots/api#sendmediagroup\nimport telegram class Telebot: def __init__(self): self.bot_token = \u0026#39;token_do_seu_bot\u0026#39; self.chat_id = \u0026#39;id_do_chat\u0026#39; self.bot = telegram.Bot(token=self.bot_token) def send_photos(self, photos): return self.bot.send_media_group(chat_id=self.chat_id, media=photos, disable_notification=True) files=\u0026#34;Arquivos que deseja enviar\u0026#34; photos=[] for file in files: photos.append(open(file, \u0026#39;rb\u0026#39;)) if photos: Telebot().send_photos(photos) ","permalink":"https://fmaced1.github.io/post/enviando-mensagem-telegram-python/","summary":"Como enviar varias fotos agrupadas no telegram? https://core.telegram.org/bots/api#sendmediagroup\nimport telegram class Telebot: def __init__(self): self.bot_token = \u0026#39;token_do_seu_bot\u0026#39; self.chat_id = \u0026#39;id_do_chat\u0026#39; self.bot = telegram.Bot(token=self.bot_token) def send_photos(self, photos): return self.bot.send_media_group(chat_id=self.chat_id, media=photos, disable_notification=True) files=\u0026#34;Arquivos que deseja enviar\u0026#34; photos=[] for file in files: photos.append(open(file, \u0026#39;rb\u0026#39;)) if photos: Telebot().send_photos(photos) ","title":"[Draft] Como enviar mensagens via telegram com python"},{"content":"WIP\n","permalink":"https://fmaced1.github.io/post/deploy-com-o-helm/","summary":"WIP","title":"Como fazer deploy da sua aplicação com o Helm"},{"content":"WIP\n","permalink":"https://fmaced1.github.io/post/como-fazer-um-chatbot/","summary":"WIP","title":"Como fazer o seu próprio chatbot em python com o ChatterBot"},{"content":"Intro\nEsse é um guia para servir de base para os seus estudos e preparação para a prova do CKA.\nLinks oficiais sobre a cka:\n Sobre a certificação [Link] O que cai na prova? [Link]  Principais tópicos e seus respectivos pesos:\n   Domain Weight     Troubleshooting 30%   Cluster Architecture, Installation \u0026amp; Configuration 25%   Services \u0026amp; Networking 20%   Workloads \u0026amp; Scheduling 15%   Storage 10%    Links úteis para estudar:\n https://ravikirans.com/cka-kubernetes-exam-study-guide/ https://codeburst.io/the-ckad-browser-terminal-10fab2e8122e https://jimangel.io/post/cka-exam-for-experienced-kubernetes-operators/  Não faça o tutorial kubernetes-the-hard-way logo de início O tutorial do @kelseyhightower é excelente, porém acredito que não é uma boa idéia investir um tempo considerável, executando um passo a passo que você não irá entender muita coisa do que fez quando terminar.\nDepois de um tempo de estudo, quando já estiver entendendo como funciona os principais componentes, aconselho sim que execute o tutorial pelo menos 2 vezes, tente não entrar em um modo automático, apenas copiando e colando os comandos.\nhttps://github.com/kelseyhightower/kubernetes-the-hard-way\nOs atalhos mais usados do vim O vim é um editor derivado do vi presente na maioria das distribuições linux e unix, bem complexo, mas muito eficiente, no exame você terá apenas uma aba com um terminal linux no caso um ubuntu.\nDominar o vim vai te ajudar muito a economizar um tempo precioso na hora do seu exame, acredite 2 horas não dá pra nada, já que são 24 perguntas totalmente práticas :)\n   Comandos Descrição     i Habilita a inserção de texto onde está o cursor   esc : q ! Sai do vim confirmando que não quer salvar (Mais usado)   esc : w q ! Salva e sai do vim   esc d 99 d Apaga 99 linhas à partir do cursor   esc dd Apaga a linha inteira onde o cursor está   esc : % s/x/y/g Faz o replace de x por y em todas as vezes que x aparece no arquivo   esc gg Move o cursor para a primeira linha do arquivo   esc : set number Habilita a numeração das linhas do arquivo   esc G Move para o final do arquivo   esc /texto_exemplo Procura pela palavra texto_exemplo no arquivo   esc /texto_exemplo + n Pula para a próxima ocorrência   esc /texto_exemplo + N Pula para a ocorrência anterior    Com esses comandos você consegue copiar, colar e apagar blocos de código:\n   Comandos Descrição     esc + V + (seta cima / baixo) Seleciona as linhas que serão copiadas   y copia as linhas selecionadas   d Apaga as linhas selecionadas   p ou P Cola as linhas selecionadas    Como splitar a tela com o TMUX O tmux não vem instalado por padrão no servidor que é usado no exame, para instalar é bem simples basta rodar isso:\nsudo apt -y install tmux # caso não funcione, tente rodar os seguintes comandos e depois rodar o install novamente: # sudo apt update # sudo apt upgrade Principais comandos tmux que podem ser usados no exame.\n# O prefix deverá ser usado antes de todos os comandos ao tmux. {prefix} = ctrl + b ctrl + b + \u0026quot; Divide a janela na horizontal ctrl + b + % Divide a janela na horizontal ctrl + b + {Arrow-Key} Muda de janela ctrl + b + c Cria uma nova janela ctrl + b + p Pula para a janela anterior ctrl + b + n Pula para a proxima janela ctrl + b + {Page-up-Key} Desliza a pagina na janela atual ctrl + b + {Arrow-Key} Aumenta ou diminui o tamanho da janela atual ctrl + d Sai da janela atual Deletar objetos pode te custar alguns segundos Aqui vai uma dica quase niguém fala e que me ajudou bastante, deletar objetos no kubernetes pode demorar alguns segundos principalmente quando tem alguma secret, configmap ou volume atrelada à ela, no caso de deployment ou pod.\nkubectl -f delete objeto.yaml ; ctrl+z + bg O comando ctrl+z + bg coloca o comando anterior em backgroud e te libera a linha de comando para ir editando o yml e isso economiza muito tempo, mesmo.\nSe quiser voltar o comando para foreground, só digitar:\nfg Kubectl aliases e autocompletion Sem dúvida os aliases mais importantes são o k=\u0026quot;kubectl\u0026quot; e o $dry, não usei muitos aliases como nesse projeto, porque sinceramente não achei que valesse muito a pena, afinal iria acabar perdendo mais tempo tentando lembrar dos comandos do que realmente fazendo o que precisava.\nexport dry=\u0026#34;--dry-run=client -o yaml\u0026#34; # Cria um yaml com o manifest de um pod nginx kubectl run nginx --image nginx $dry \u0026gt; nginx_pod.yaml # Mesmo que o anterior, porém aqui cria um deployment ao invés de um pod kubectl create deploy nginx --image nginx $dry \u0026gt; deploy.yaml E para habilitar o autocomplete do kubectl, aqui está o link da documentação oficial\necho \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;complete -F __start_kubectl k\u0026#39; \u0026gt;\u0026gt;~/.bashrc Anote as respostas Logo que iniciar o exame, rode esse comando à seguir no terminal:\nfor i in $(seq 1 24);do echo \u0026#34;$i- \u0026#34; ;done Isso irá gerar 24 linhas no seguinte formato:\n1 - 2 - 3 - 4 - ... 24 - Depois copie e cole no notepad da plataforma, assim voçê conseguirá marcar as questões feitas e o peso.\nNo final o meu notepad do exame ficou algo parecido com isso:\nQuestões, Peso, OK/NOK 1 - 4 - OK 2 - 3 - OK 3 - 7 - NOK 4 - 4 - OK ... 24 - 8 - NOK Outras dicas:\n Tenha uma máquina windows de reserva, quando fiz o exame perdi cerca de 20 minutos entre ficar tentando compartilhar a câmera e trocar de notebook. Seu documento deve estar dentro do prazo de validade, seja ele RG ou CNH, eles realmente olham a data de validade, aliás a imagem da webcam tem que estar nítida ao ponto de conseguir ver o que está escrito. Não faça a prova de frente para uma janela, isso pode atrapalhar a visibilidade  ","permalink":"https://fmaced1.github.io/post/preparacao-para-o-cka/","summary":"Intro\nEsse é um guia para servir de base para os seus estudos e preparação para a prova do CKA.\nLinks oficiais sobre a cka:\n Sobre a certificação [Link] O que cai na prova? [Link]  Principais tópicos e seus respectivos pesos:\n   Domain Weight     Troubleshooting 30%   Cluster Architecture, Installation \u0026amp; Configuration 25%   Services \u0026amp; Networking 20%   Workloads \u0026amp; Scheduling 15%   Storage 10%    Links úteis para estudar:","title":"Dicas para passar no exame CKA (Certified Kubernetes Administrator)"},{"content":"","permalink":"https://fmaced1.github.io/archives/","summary":"archives","title":"Archive"},{"content":"","permalink":"https://fmaced1.github.io/search/","summary":"search","title":"Search"}]