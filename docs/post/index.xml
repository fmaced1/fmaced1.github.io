<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on fmaced1</title>
    <link>https://fmaced1.github.io/post/</link>
    <description>Recent content in Posts on fmaced1</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 17 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fmaced1.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Draft] Como fazer cache de objetos json usando python e redis</title>
      <link>https://fmaced1.github.io/post/como-fazer-cache-de-objetos-json-com-python/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/como-fazer-cache-de-objetos-json-com-python/</guid>
      <description>Intro Continuando a série &amp;ldquo;Financial Advisor Bot&amp;rdquo; que inicia nesse post aqui.
Nesse post irei compartilhar a solução de cache que estou usando, bem simples e direto ao ponto. O objetivo aqui é mostrar uma solução de cache que é fácil de implementar e que já irá evitar que o seu serviço fique indisponível, e de quebra irá diminuir bastante o seu tempo de resposta.
Primeiro, suba uma instância do redis Se você já não tiver uma instância do redis:</description>
    </item>
    
    <item>
      <title>Debugging remoto de aplicações Java no Kubernetes</title>
      <link>https://fmaced1.github.io/post/kubernetes-debug-remote-java-app/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/kubernetes-debug-remote-java-app/</guid>
      <description>Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT&amp;rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.
Pesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal &amp;ldquo;interessante&amp;rdquo; com base em alguns parâmetros.</description>
    </item>
    
    <item>
      <title>Fazendo o download dos dados históricos de ações usando o yfinance</title>
      <link>https://fmaced1.github.io/post/dados-historicos-acoes-b3/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/dados-historicos-acoes-b3/</guid>
      <description>Intro Sempre me interessei pelo mercado financeiro e por toda a tecnologia que esse mercado já usa de ferramenta, como por exemplo HFT&amp;rsquo;s (High-Frequency Trading) e Quantitative Trading, temas que unem o melhor do mercado de tecnologia e financeiro.
Pesquisando sobre o tema vi que grandes bancos já usam essas e outras tecnologias para ajudar na tomada de decisão ou para recomendar investimentos para os seus clientes, e pensando em uma escala menor decidi criar um advisor que pudesse me ajudar a analisar todas as ações da bolsa brasileira de forma massiva e me mostrasse apenas aquelas ações que estivessem com algum sinal &amp;ldquo;interessante&amp;rdquo; com base em alguns parâmetros.</description>
    </item>
    
    <item>
      <title>[Draft] Como enviar mensagens via telegram com python</title>
      <link>https://fmaced1.github.io/post/enviando-mensagem-telegram-python/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/enviando-mensagem-telegram-python/</guid>
      <description>Como enviar varias fotos agrupadas no telegram? https://core.telegram.org/bots/api#sendmediagroup
import telegram class Telebot: def __init__(self): self.bot_token = &amp;#39;token_do_seu_bot&amp;#39; self.chat_id = &amp;#39;id_do_chat&amp;#39; self.bot = telegram.Bot(token=self.bot_token) def send_photos(self, photos): return self.bot.send_media_group(chat_id=self.chat_id, media=photos, disable_notification=True) files=&amp;#34;Arquivos que deseja enviar&amp;#34; photos=[] for file in files: photos.append(open(file, &amp;#39;rb&amp;#39;)) if photos: Telebot().send_photos(photos) </description>
    </item>
    
    <item>
      <title>Como fazer deploy da sua aplicação com o Helm</title>
      <link>https://fmaced1.github.io/post/deploy-com-o-helm/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/deploy-com-o-helm/</guid>
      <description>WIP</description>
    </item>
    
    <item>
      <title>Como fazer o seu próprio chatbot em python com o ChatterBot</title>
      <link>https://fmaced1.github.io/post/como-fazer-um-chatbot/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/como-fazer-um-chatbot/</guid>
      <description>WIP</description>
    </item>
    
    <item>
      <title>Dicas para passar no exame CKA (Certified Kubernetes Administrator)</title>
      <link>https://fmaced1.github.io/post/preparacao-para-o-cka/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fmaced1.github.io/post/preparacao-para-o-cka/</guid>
      <description>Intro
Esse é um guia para servir de base para os seus estudos e preparação para a prova do CKA.
Links oficiais sobre a cka:
 Sobre a certificação [Link] O que cai na prova? [Link]  Principais tópicos e seus respectivos pesos:
   Domain Weight     Troubleshooting 30%   Cluster Architecture, Installation &amp;amp; Configuration 25%   Services &amp;amp; Networking 20%   Workloads &amp;amp; Scheduling 15%   Storage 10%    Links úteis para estudar:</description>
    </item>
    
  </channel>
</rss>
